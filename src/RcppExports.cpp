// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dilateImage
Rcpp::IntegerMatrix dilateImage(Rcpp::IntegerMatrix mat, int kernel, int niter);
RcppExport SEXP _SBRUV_dilateImage(SEXP matSEXP, SEXP kernelSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(dilateImage(mat, kernel, niter));
    return rcpp_result_gen;
END_RCPP
}
// drawRectangle
Rcpp::IntegerMatrix drawRectangle(Rcpp::IntegerMatrix mat, Rcpp::IntegerVector corner1, Rcpp::IntegerVector corner2, int value, int thickness);
RcppExport SEXP _SBRUV_drawRectangle(SEXP matSEXP, SEXP corner1SEXP, SEXP corner2SEXP, SEXP valueSEXP, SEXP thicknessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type corner1(corner1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type corner2(corner2SEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type thickness(thicknessSEXP);
    rcpp_result_gen = Rcpp::wrap(drawRectangle(mat, corner1, corner2, value, thickness));
    return rcpp_result_gen;
END_RCPP
}
// equalizeImageHist
Rcpp::NumericMatrix equalizeImageHist(Rcpp::NumericMatrix mat);
RcppExport SEXP _SBRUV_equalizeImageHist(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(equalizeImageHist(mat));
    return rcpp_result_gen;
END_RCPP
}
// erodeImage
Rcpp::IntegerMatrix erodeImage(Rcpp::IntegerMatrix mat, int kernel, int niter);
RcppExport SEXP _SBRUV_erodeImage(SEXP matSEXP, SEXP kernelSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(erodeImage(mat, kernel, niter));
    return rcpp_result_gen;
END_RCPP
}
// findBoundaryPoints
Rcpp::IntegerMatrix findBoundaryPoints(Rcpp::IntegerMatrix mat);
RcppExport SEXP _SBRUV_findBoundaryPoints(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(findBoundaryPoints(mat));
    return rcpp_result_gen;
END_RCPP
}
// findCornerSubPix
Rcpp::NumericMatrix findCornerSubPix(Rcpp::NumericMatrix image, Rcpp::IntegerMatrix corners, int win, int max_iter, double criteria);
RcppExport SEXP _SBRUV_findCornerSubPix(SEXP imageSEXP, SEXP cornersSEXP, SEXP winSEXP, SEXP max_iterSEXP, SEXP criteriaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type corners(cornersSEXP);
    Rcpp::traits::input_parameter< int >::type win(winSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type criteria(criteriaSEXP);
    rcpp_result_gen = Rcpp::wrap(findCornerSubPix(image, corners, win, max_iter, criteria));
    return rcpp_result_gen;
END_RCPP
}
// findHomography
List findHomography(NumericVector coor_img, Nullable<NumericVector> coor_obj_, Nullable<int> nx_, Nullable<int> ny_);
RcppExport SEXP _SBRUV_findHomography(SEXP coor_imgSEXP, SEXP coor_obj_SEXP, SEXP nx_SEXP, SEXP ny_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type coor_img(coor_imgSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type coor_obj_(coor_obj_SEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type nx_(nx_SEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type ny_(ny_SEXP);
    rcpp_result_gen = Rcpp::wrap(findHomography(coor_img, coor_obj_, nx_, ny_));
    return rcpp_result_gen;
END_RCPP
}
// generateQuads
Rcpp::IntegerMatrix generateQuads(Rcpp::IntegerMatrix binary_mat, Rcpp::IntegerMatrix edge_mat, int perim_min, int perim_max, double quad_fit_max, double poly_cont_min, double poly_cont_max, double poly_asp_min, int approx_thresh);
RcppExport SEXP _SBRUV_generateQuads(SEXP binary_matSEXP, SEXP edge_matSEXP, SEXP perim_minSEXP, SEXP perim_maxSEXP, SEXP quad_fit_maxSEXP, SEXP poly_cont_minSEXP, SEXP poly_cont_maxSEXP, SEXP poly_asp_minSEXP, SEXP approx_threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type binary_mat(binary_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type edge_mat(edge_matSEXP);
    Rcpp::traits::input_parameter< int >::type perim_min(perim_minSEXP);
    Rcpp::traits::input_parameter< int >::type perim_max(perim_maxSEXP);
    Rcpp::traits::input_parameter< double >::type quad_fit_max(quad_fit_maxSEXP);
    Rcpp::traits::input_parameter< double >::type poly_cont_min(poly_cont_minSEXP);
    Rcpp::traits::input_parameter< double >::type poly_cont_max(poly_cont_maxSEXP);
    Rcpp::traits::input_parameter< double >::type poly_asp_min(poly_asp_minSEXP);
    Rcpp::traits::input_parameter< int >::type approx_thresh(approx_threshSEXP);
    rcpp_result_gen = Rcpp::wrap(generateQuads(binary_mat, edge_mat, perim_min, perim_max, quad_fit_max, poly_cont_min, poly_cont_max, poly_asp_min, approx_thresh));
    return rcpp_result_gen;
END_RCPP
}
// intCornersFromQuads
Rcpp::IntegerMatrix intCornersFromQuads(Rcpp::IntegerMatrix quads, int max_dist);
RcppExport SEXP _SBRUV_intCornersFromQuads(SEXP quadsSEXP, SEXP max_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type quads(quadsSEXP);
    Rcpp::traits::input_parameter< int >::type max_dist(max_distSEXP);
    rcpp_result_gen = Rcpp::wrap(intCornersFromQuads(quads, max_dist));
    return rcpp_result_gen;
END_RCPP
}
// orderCorners
Rcpp::IntegerMatrix orderCorners(Rcpp::IntegerMatrix int_corners, int nx, int ny);
RcppExport SEXP _SBRUV_orderCorners(SEXP int_cornersSEXP, SEXP nxSEXP, SEXP nySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type int_corners(int_cornersSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type ny(nySEXP);
    rcpp_result_gen = Rcpp::wrap(orderCorners(int_corners, nx, ny));
    return rcpp_result_gen;
END_RCPP
}
// meanBlurImage
Rcpp::NumericMatrix meanBlurImage(Rcpp::NumericMatrix mat, int kernel);
RcppExport SEXP _SBRUV_meanBlurImage(SEXP matSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(meanBlurImage(mat, kernel));
    return rcpp_result_gen;
END_RCPP
}
// rgbToGray
Rcpp::NumericMatrix rgbToGray(Rcpp::NumericMatrix ch1, Rcpp::NumericMatrix ch2, Rcpp::NumericMatrix ch3);
RcppExport SEXP _SBRUV_rgbToGray(SEXP ch1SEXP, SEXP ch2SEXP, SEXP ch3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ch1(ch1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ch2(ch2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ch3(ch3SEXP);
    rcpp_result_gen = Rcpp::wrap(rgbToGray(ch1, ch2, ch3));
    return rcpp_result_gen;
END_RCPP
}
// thresholdImageMatrix
Rcpp::IntegerMatrix thresholdImageMatrix(Rcpp::NumericMatrix mat, Rcpp::NumericMatrix thresh_mat, double delta, int type);
RcppExport SEXP _SBRUV_thresholdImageMatrix(SEXP matSEXP, SEXP thresh_matSEXP, SEXP deltaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type thresh_mat(thresh_matSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(thresholdImageMatrix(mat, thresh_mat, delta, type));
    return rcpp_result_gen;
END_RCPP
}
// transformPlanarCalibrationCoordinates
NumericMatrix transformPlanarCalibrationCoordinates(NumericMatrix tpar, int nx, int ny, double sx, Nullable<double> sy_);
RcppExport SEXP _SBRUV_transformPlanarCalibrationCoordinates(SEXP tparSEXP, SEXP nxSEXP, SEXP nySEXP, SEXP sxSEXP, SEXP sy_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tpar(tparSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type ny(nySEXP);
    Rcpp::traits::input_parameter< double >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type sy_(sy_SEXP);
    rcpp_result_gen = Rcpp::wrap(transformPlanarCalibrationCoordinates(tpar, nx, ny, sx, sy_));
    return rcpp_result_gen;
END_RCPP
}
// undistort
NumericVector undistort(NumericVector x, NumericVector image_size, NumericVector center, NumericVector k, NumericVector p);
RcppExport SEXP _SBRUV_undistort(SEXP xSEXP, SEXP image_sizeSEXP, SEXP centerSEXP, SEXP kSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type image_size(image_sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type center(centerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(undistort(x, image_size, center, k, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SBRUV_dilateImage", (DL_FUNC) &_SBRUV_dilateImage, 3},
    {"_SBRUV_drawRectangle", (DL_FUNC) &_SBRUV_drawRectangle, 5},
    {"_SBRUV_equalizeImageHist", (DL_FUNC) &_SBRUV_equalizeImageHist, 1},
    {"_SBRUV_erodeImage", (DL_FUNC) &_SBRUV_erodeImage, 3},
    {"_SBRUV_findBoundaryPoints", (DL_FUNC) &_SBRUV_findBoundaryPoints, 1},
    {"_SBRUV_findCornerSubPix", (DL_FUNC) &_SBRUV_findCornerSubPix, 5},
    {"_SBRUV_findHomography", (DL_FUNC) &_SBRUV_findHomography, 4},
    {"_SBRUV_generateQuads", (DL_FUNC) &_SBRUV_generateQuads, 9},
    {"_SBRUV_intCornersFromQuads", (DL_FUNC) &_SBRUV_intCornersFromQuads, 2},
    {"_SBRUV_orderCorners", (DL_FUNC) &_SBRUV_orderCorners, 3},
    {"_SBRUV_meanBlurImage", (DL_FUNC) &_SBRUV_meanBlurImage, 2},
    {"_SBRUV_rgbToGray", (DL_FUNC) &_SBRUV_rgbToGray, 3},
    {"_SBRUV_thresholdImageMatrix", (DL_FUNC) &_SBRUV_thresholdImageMatrix, 4},
    {"_SBRUV_transformPlanarCalibrationCoordinates", (DL_FUNC) &_SBRUV_transformPlanarCalibrationCoordinates, 5},
    {"_SBRUV_undistort", (DL_FUNC) &_SBRUV_undistort, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SBRUV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
